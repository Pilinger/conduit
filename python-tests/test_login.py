# Generated by Selenium IDE
import pytest
import time
# preparing selenium and chrome web driver manager
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
# importing web driver waiting components
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# importing os for running docker-compose up -d
import os


# initialising driver
@pytest.fixture(scope='session')
def browser_driver():
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)
    # os.system('docker-compose up -d')
    driver.get("http://localhost:1667/#/")
    return driver


# clicking on decline button and checking if it disappears
def test_decline_cookies(browser_driver):
    time.sleep(1)
    decline_xpath = '//div[@class="cookie__bar__buttons"]/button'
    """Wait or no"""
    decline_buttons = WebDriverWait(browser_driver,
                                    10).until(EC.visibility_of_any_elements_located((By.XPATH, decline_xpath)))
    # decline_buttons = browser_driver.find_elements_by_xpath(decline_xpath)
    assert (len(decline_buttons) > 0)
    decline_buttons[0].click()
    time.sleep(1)
    decline_buttons = browser_driver.find_elements_by_xpath(decline_xpath)
    assert (len(decline_buttons) == 0)


# CON_TC_002_login
# logging in and testing if the username appears correctly
def test_logging_in(browser_driver):
    time.sleep(1)
    # assigning xpath strings, and test strings
    login_xpath = '//a[@href="#/login"]'
    email_xpath = '//input[@placeholder="Email"]'
    password_xpath = '//input[@placeholder="Password"]'
    user_li_xpath = '//*[@id="app"]/nav/div/ul/li[4]/a'
    user_name = 'testuser1'
    password_str = 'Abcd123$'
    email_end = '@example.com'
    """Wait or no"""
    login = WebDriverWait(browser_driver, 10).until(EC.visibility_of_element_located((By.XPATH, login_xpath)))
    # login = browser_driver.find_element_by_xpath(login_xpath)
    login.click()
    time.sleep(1)
    browser_driver.find_element_by_xpath(email_xpath).send_keys(f'{user_name}{email_end}')
    time.sleep(1)
    browser_driver.find_element_by_xpath(password_xpath).send_keys(password_str)
    time.sleep(1)
    browser_driver.find_element_by_xpath('//form/button').click()
    time.sleep(2)
    username = browser_driver.find_element_by_xpath(user_li_xpath).text
    assert (username == user_name)


# paginating through the pages, and testing if its possible
def test_paginate(browser_driver):
    # collecting the clickable pagination links
    paginate_links = browser_driver.find_elements_by_xpath('//ul[@class="pagination"]/li/a')
    assert (len(paginate_links) > 0)
    for link in paginate_links:
        link.click()
        time.sleep(1)


# CON_TC_005_post
# posting a New Article, and testing if it appears
def test_new_article(browser_driver):
    # data for posting
    article_title_str = 'This is a test article.'
    article_about_str = 'This is about to test the posting method.'
    article_markdown_str = "I'm about to test the posting method of the conduit site."
    article_tags_str = 'test,post'
    # clicking the New Article button
    new_article_xpath = '//a[@href="#/editor"]'
    browser_driver.find_element_by_xpath(new_article_xpath).click()
    time.sleep(5)
    # gathering the inputs and buttons
    title_input = browser_driver.find_element_by_xpath('//input[@class="form-control form-control-lg"]')
    about_input = browser_driver.find_element_by_xpath('//input[@class="form-control"]')
    text_input = browser_driver.find_element_by_xpath('//textarea')
    tags_input = browser_driver.find_element_by_xpath('//input[@class="ti-new-tag-input ti-valid"]')
    publish_article_button = browser_driver.find_element_by_tag_name('button')

    # assigning values to the inputs, and publishing the Article
    title_input.send_keys(article_title_str)
    time.sleep(1)
    about_input.send_keys(article_about_str)
    time.sleep(1)
    text_input.send_keys(article_markdown_str)
    time.sleep(1)
    tags_input.send_keys(article_tags_str)
    time.sleep(1)
    publish_article_button.click()
    time.sleep(1)

    # checking the strings to a newly posted Article
    assert (article_title_str == browser_driver.find_element_by_tag_name('h1').text)
    assert (article_markdown_str == browser_driver.find_element_by_tag_name('p').text)
    tags = browser_driver.find_elements_by_xpath('//a[@class="tag-pill tag-default"]')
    assert (tags[0].text == 'test')
    assert (tags[1].text == 'post')
